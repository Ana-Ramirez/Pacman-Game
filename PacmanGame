int [][] originalGameGrid={

  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 0, 1, 1, 1, 2, 1, 1, 0, 2, 2, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 1}, 
  {1, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};



int [][] gameGrid={

  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 0, 1, 1, 1, 2, 1, 1, 0, 2, 2, 2, 2, 2, 0, 1, 1, 2, 1, 1, 1, 0, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 1}, 
  {1, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};


///////////////making the duplication of gameGrid less fugly



//int [][] originalGameGrid = new int [23][23];

//for (int row = 0; row<gameGrid.length; row++) {
//  for (int col = 0; col<gameGrid[row].length; col++) {
//    originalGameGrid[row][col] = gameGrid[row][col];
//  }
//}

///////////////making the duplication of gameGrid less fugly



//objects
Pacman pacman;
Ghosts redGhost;
Ghosts blueGhost;
Ghosts pinkGhost;
Ghosts orangeGhost;

//fonts
PFont pacmanFont;
PFont normalFont;

//menu buttons
color menuButtonColour1 = color(255);
color menuButtonColour2 = color(255);

//images for STARTMENU screen
PImage pacmanImage;
PImage redGhostImage;
PImage blueGhostImage;
PImage pinkGhostImage;
PImage orangeGhostImage;

//enums
gameStatus status = gameStatus.STARTMENU;
enum gameStatus {
  STARTMENU, PLAYINGGAME, GAMEWON, GAMEOVER
}

//grid is 23 x 23.
int rows = gameGrid.length;
int cols = gameGrid[0].length;
public int boxSize;

//variables for the score
int score = 0; 
int totalFood = 0; //total amount of food
int finalScore = 0; 

void setup() {
  frameRate(10);
  boxSize = width/cols;
  pacman = new Pacman(16, 11);
  redGhost = new Ghosts(2, 5);
  blueGhost = new Ghosts(18, 17);
  pinkGhost = new Ghosts(20, 2);
  orangeGhost = new Ghosts(4, 20);
  
  //loading STARTMENU images
  pacmanImage = loadImage("\\data\\images\\pacman\\pacmanOpenRight.png");
  redGhostImage = loadImage("\\data\\images\\ghosts\\redGhostRight.png");
  blueGhostImage = loadImage("\\data\\images\\ghosts\\blueGhostRight.png");
  pinkGhostImage = loadImage("\\data\\images\\ghosts\\pinkGhostRight.png");
  orangeGhostImage = loadImage("\\data\\images\\ghosts\\orangeGhostRight.png");

  pacmanFont = createFont("font/CRACKMAN.TTF", 36);
  normalFont = createFont("font/8bit.ttf", 36);
  textFont(pacmanFont);
  size(600, 650);
  
  //calculating the total amount of food available
  for (int i=0; i<rows; i++) {
    for (int j=0; j<cols; j++) {
      if (gameGrid[i][j] == 2) {
        totalFood++;
      }
    }
  }
}


void draw() {
  switch(status) {

  case STARTMENU:
    drawMenu();
    reInitialise();
    break;

  case PLAYINGGAME:
    frameRate(10);
    textFont(pacmanFont);
    noStroke();
    background(0);
    this.drawGrid();
    pacman.display();
    pacman.calculateScore();
    redGhost.displayGhosts();
    redGhost.moveGhosts();
    redGhost.killPacman();
    this.drawPoints();
    break;

  case GAMEWON:
    drawMenu();
    reInitialise();
    break;

  case GAMEOVER:
    drawMenu();
    reInitialise();
    break;
  }
}


//resetting the game each time
void reInitialise() {
  for (int row = 0; row<gameGrid.length; row++) {
    for (int col = 0; col<gameGrid[row].length; col++) {
      gameGrid[row][col] = originalGameGrid[row][col];
    }
  }
  score = 0;
  pacman.pacmanX = 11;
  pacman.pacmanY = 16;
  pacman.facingDirection = "left";
}


//drawing the maze
void drawGrid() {
  for (int row = 0; row<rows; row++) {
    for (int col = 0; col<cols; col++) {

      if (gameGrid[row][col] == 0) { //drawing blue walls
        fill(0, 0, 255); 
        rect(col*boxSize, row*boxSize, boxSize, boxSize);
      } else if (gameGrid[row][col] == 1) { //drawing path without 'food'
        fill(0); 
        rect(col*boxSize, row*boxSize, boxSize, boxSize);
      } else if (gameGrid[row][col] == 2) { //drawing 'food' inside these boxes
        fill(0);
        rect(col*boxSize, row*boxSize, boxSize, boxSize);
        fill(255); 
        rect(col*boxSize + (boxSize*0.4), row*boxSize + (boxSize*0.4), boxSize/4, boxSize/4); // white boxes are 4 pixels wide
      }
    }
  }
}

//drawing all the food
void drawPoints() {
  fill(255);
  text("Score: ", boxSize, height*0.96);
  fill(255, 255, 0);
  text(score, (boxSize*7)+(boxSize*0.5), height*0.96);
}

//drawing the menus
void drawMenu() {
  background(0);
  textFont(pacmanFont);
  textSize(80);
  textAlign(CENTER);
  fill(255, 255, 0);
  if (status == gameStatus.STARTMENU) {
    text("PACMAN!", width/2, height/2.2);
    pacmanImage = loadImage("data/images/pacman/pacmanOpenRight.png");
    image(pacmanImage, width/4, height/2+7, 50, 50);

    redGhostImage = loadImage("data/images/ghosts/redGhostRight.png");
    image(redGhostImage, width/4+75, height/2+7, 50, 50);

    blueGhostImage = loadImage("data/images/ghosts/blueGhostRight.png");
    image(blueGhostImage, width/4+135, height/2+7, 50, 50);

    pinkGhostImage = loadImage("data/images/ghosts/pinkGhostRight.png");
    image(pinkGhostImage, width/4+195, height/2+7, 50, 50);

    orangeGhostImage = loadImage("data/images/ghosts/orangeGhostRight.png");
    image(orangeGhostImage, width/4+255, height/2+7, 50, 50);
  }
  
  if (status == gameStatus.GAMEWON) {
    text("You Won!", width/2, height/2.2);
  }
  
  if (status == gameStatus.GAMEOVER) {
    text("Game over!", width/2, height/2.2);
  }
  
  textFont(normalFont);
  textSize(40);
  textAlign(CENTER);
  fill(255);
  
  if (status == gameStatus.GAMEWON) {
    text("Score: " + (totalFood*10), (width/2), (height/2)+width/12);
  }
  
  if (status == gameStatus.GAMEOVER) {
    text("Score: " + finalScore, (width/2), (height/2)+width/12);
  }
  containsMouse();
}

//drawing the buttons in the menus
void drawMenuButtons() {
  frameRate(60);
  fill(menuButtonColour1);
  rect(width/3, (height/2)+(height/7), 90, 40);
  fill(menuButtonColour2);
  rect((width/3)+(width/5.5), (height/2)+(height/7), 90, 40);
  fill(0);
  textSize(25);
  textAlign(LEFT);
  
  if (status == gameStatus.STARTMENU) {
    text("Play", (width/3)+17, (height/2)+(height/7)+28);
    text("Quit", (width/3)+(width/5.5)+17, (height/2)+(height/7)+28);
  } 
  
  else {
    text("Replay", (width/3)+4, (height/2)+(height/7)+28);
    text("Quit", (width/3)+(width/5.5)+17, (height/2)+(height/7)+28);
  }
}
