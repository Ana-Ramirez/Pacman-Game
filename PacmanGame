int [][] gameGrid={

  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 0, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1}, 
  {1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 1}, 
  {1, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1}, 
  {1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1}, 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, 
  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}

};

Pacman pacman;
PFont pacmanFont;
PFont normalFont;
gameStatus status = gameStatus.PLAYINGGAME;
enum gameStatus {
  STARTMENU, PLAYINGGAME, GAMEWON, GAMEOVER
}

// My grid is 23 x 23.
int rows = gameGrid.length;
int cols = gameGrid[0].length;

public int boxSize;
int totalFood = 0;
int score = 0;

void setup() {
  frameRate(10);
  boxSize = width/cols;
  pacman = new Pacman(16, 11);
  pacmanFont = createFont("font/CRACKMAN.TTF", 36);
  normalFont = createFont("font/8bit.ttf", 36);
  textFont(pacmanFont);
  size(600, 650);
  for (int i=0; i<rows; i++) {
    for (int j=0; j<cols; j++) {
      if (gameGrid[i][j] == 2) {
        totalFood++;
      }
    }
  }
}


void draw() {

  switch(status) {

  case STARTMENU:
    println("STARTMENU");
    break;

  case PLAYINGGAME:
    //if(status == gameStatus.PLAYINGGAME){
    noStroke();
    background(0);
    this.drawGrid();
    pacman.display();
    this.drawPoints();
    break;
    //}

  case GAMEWON:
    //if(status == gameStatus.GAMEWON){
    background(0);
    textFont(pacmanFont);
    textSize(80);
    textAlign(CENTER);
    fill(255, 255, 0);
    text("You Won!", width/2, height/2.2);
    textFont(normalFont);
    textSize(40);
    textAlign(CENTER);
    fill(255);    
    text("Score: " + score, (width/2), (height/2)+width/12);
    break;
    //}

  case GAMEOVER:
    println("GAMEOVER");
    break;
  }
}


void drawGrid() {
  for (int row = 0; row<rows; row++) {
    for (int col = 0; col<cols; col++) {

      if (gameGrid[row][col] == 0) { //drawing blue walls
        fill(0, 0, 255); 
        rect(col*boxSize, row*boxSize, boxSize, boxSize);
      } else if (gameGrid[row][col] == 1) { //drawing path without 'food'
        fill(0); 
        rect(col*boxSize, row*boxSize, boxSize, boxSize);
      } else if (gameGrid[row][col] == 2) { //drawing 'food' inside these boxes
        fill(0);
        rect(col*boxSize, row*boxSize, boxSize, boxSize);
        fill(255); 
        rect(col*boxSize + (boxSize*0.4), row*boxSize + (boxSize*0.4), boxSize/4, boxSize/4); // white boxes are 4 pixels wide
      }
    }
  }
}

void drawPoints() {
    fill(255);
    text("Score: ", boxSize, height*0.96);
    fill(255, 255, 0);
    text(score, (boxSize*7)+(boxSize*0.5), height*0.96);
}
